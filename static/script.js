"use strict";
console.log("script.js has been loaded and is running!");
document.addEventListener('DOMContentLoaded', () => {
    console.log("DOMContentLoaded event fired!");
    // =================================================================
    // 1. Constants and DOM Elements
    // =================================================================

    console.log("Searching for DOM elements...");
    const storyUrlInput = document.getElementById('story-url-input');
    const playButton = document.getElementById('play-button');
    console.log("Play button element:", playButton);
    console.log("URL input element:", storyUrlInput);
    if (playButton) {
         console.log("Play button found! Attaching event listener...");
         playButton.addEventListener('click', () => {
             console.log("Play button CLICKED!"); // Log khi nh·∫•n n√∫t
             // ... code x·ª≠ l√Ω s·ª± ki·ªán click c·ªßa b·∫°n
         });
    } else {
         console.error("CRITICAL: Play button not found in the DOM!");
    }
    const audioPlayer = document.getElementById('audio-player');
    const statusDisplay = document.getElementById('status-display');
    const navControls = document.getElementById('navigation-controls');
    const prevChapterButton = document.getElementById('prev-chapter-button');
    const nextChapterButton = document.getElementById('next-chapter-button');
    const mainContainer = document.querySelector('.container');
    const loadingSpinner = document.getElementById('loading-spinner');
    const SUPPORTED_DOMAINS = [
        'truyenfull.vn', 
        'tangthuvien.net',
        'truyenconvert.net',
        'truyenfull.vision',
        'truyenhdt.com',
        'bnsach.com',
        'truyenwikidich.net',
        'truyenyy.mobi',
        'gocnhocuasakiblog.wordpress.com'
        // Th√™m b·∫•t k·ª≥ domain n√†o kh√°c b·∫°n c√≥
    ];
    const SUPPORTED_SITES_FRIENDLY_NAMES = ["truyenfull.vision, truyenyy.mobi"];
    const REQUEST_TIMEOUT = 30000; // 30 seconds

    const metadataCache = new Map();

    // =================================================================
    // 2. State Management
    // =================================================================

    let playerState = {
        currentUrl: null,
        currentTitle: '',
        nextUrl: null,
        prevUrl: null
    };
    let currentPlaybackController = null;
    let pendingStartTime = 0;
    let lastSaveTime = 0;

    // =================================================================
    // 3. Accessibility & UI Management
    // =================================================================

    function setupAccessibility() {
        playButton.setAttribute('aria-label', 'Ph√°t ho·∫∑c th·ª≠ l·∫°i ch∆∞∆°ng truy·ªán');
        storyUrlInput.setAttribute('aria-label', '√î d√°n link ch∆∞∆°ng truy·ªán');
        prevChapterButton.setAttribute('aria-label', 'Chuy·ªÉn ƒë·∫øn ch∆∞∆°ng tr∆∞·ªõc');
        nextChapterButton.setAttribute('aria-label', 'Chuy·ªÉn ƒë·∫øn ch∆∞∆°ng sau');
        statusDisplay.setAttribute('aria-live', 'polite');
    }

    function setUiLoadingState(isLoading, isPlaying = false) {
        playButton.disabled = isLoading;
        storyUrlInput.disabled = isLoading;
        if (loadingSpinner) loadingSpinner.classList.toggle('hidden', !isLoading);

        if (isLoading) {
            playButton.textContent = "ƒêang t·∫£i...";
        } else {
            if (isPlaying) {
                playButton.innerHTML = '‚ùö‚ùö'; // Pause icon
                playButton.setAttribute('aria-label', 'T·∫°m d·ª´ng');
            } else {
                playButton.textContent = "Nghe";
                playButton.setAttribute('aria-label', 'Ph√°t ho·∫∑c th·ª≠ l·∫°i ch∆∞∆°ng truy·ªán');
            }
        }
        prevChapterButton.disabled = isLoading || !playerState.prevUrl;
        nextChapterButton.disabled = isLoading || !playerState.nextUrl;
    }

    function dismissRestorePrompt() {
        const promptElement = document.getElementById('restore-prompt');
        if (promptElement) promptElement.remove();
    }

    function createRestorePrompt(state, time) {
        dismissRestorePrompt();
        const promptElement = document.createElement('div');
        promptElement.id = 'restore-prompt';

        const message = document.createElement('p');
        message.textContent = `M·∫π c√≥ mu·ªën nghe ti·∫øp "${state.currentTitle || 'ch∆∞∆°ng tr∆∞·ªõc'}" kh√¥ng?`;

        const buttonWrapper = document.createElement('div');
        const continueButton = document.createElement('button');
        continueButton.textContent = 'Nghe ti·∫øp';
        continueButton.style.marginRight = '10px';

        const dismissButton = document.createElement('button');
        dismissButton.textContent = 'B·ªè qua';

        continueButton.addEventListener('click', () => {
            dismissRestorePrompt();
            startPlayback(state.currentUrl, time, true);
        });

        dismissButton.addEventListener('click', () => {
            dismissRestorePrompt();
            localStorage.removeItem('radioTruyenSession');
        });

        buttonWrapper.appendChild(continueButton);
        buttonWrapper.appendChild(dismissButton);
        promptElement.appendChild(message);
        promptElement.appendChild(buttonWrapper);
        mainContainer.insertAdjacentElement('afterbegin', promptElement);
    }

    // =================================================================
    // 4. Error Handling
    // =================================================================

    /**
     * X·ª≠ l√Ω t·∫≠p trung c√°c l·ªói x·∫£y ra trong qu√° tr√¨nh ph√°t.
     * Ph√¢n t√≠ch l·ªói v√† hi·ªÉn th·ªã th√¥ng b√°o th√¢n thi·ªán, c√≥ h∆∞·ªõng d·∫´n cho ng∆∞·ªùi d√πng.
     * @param {Error} error - ƒê·ªëi t∆∞·ª£ng l·ªói ƒë∆∞·ª£c throw ra.
     * @param {HTMLElement} statusElement - Ph·∫ßn t·ª≠ DOM ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o.
     * @param {boolean} isRestoring - C·ªù b√°o hi·ªáu n·∫øu l·ªói x·∫£y ra khi ƒëang kh√¥i ph·ª•c phi√™n.
     */
    async function handlePlaybackError(error, statusElement, isRestoring = false) {
        if (error.name === 'AbortError') {
            if (error.reason === 'timeout') {
                statusElement.textContent = "Y√™u c·∫ßu qu√° gi·ªù. M·∫π ki·ªÉm tra l·∫°i k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i nh√©.";
            } else {
                console.log("Request aborted by a new user action.");
            }
            return;
        }

        if (error.response && typeof error.response.json === 'function') {
            try {
                const errorData = await error.response.json();
                switch (errorData.error_code) {
                    case 'METADATA_EXTRACTION_FAILED':
                    case 'CONTENT_EXTRACTION_FAILED':
                        statusElement.innerHTML = `M·∫π ∆°i, link n√†y bot kh√¥ng ƒë·ªçc ƒë∆∞·ª£c r·ªìi. üò•<br>Hay l√† m·∫π th·ª≠ t√¨m t√™n truy·ªán n√†y tr√™n Google v√† d√°n link t·ª´ m·ªôt trong c√°c trang nh∆∞ <strong>${SUPPORTED_SITES_FRIENDLY_NAMES.join(', ')}</strong> th·ª≠ xem ·∫°?`;
                        break;
                    case 'TTS_SERVICE_UNAVAILABLE':
                        statusElement.textContent = 'D·ªãch v·ª• ƒë·ªçc truy·ªán ƒëang t·∫°m th·ªùi gi√°n ƒëo·∫°n, m·∫π th·ª≠ l·∫°i sau √≠t ph√∫t nh√©.';
                        break;
                    default:
                        statusElement.textContent = errorData.message || 'Bot kh√¥ng ƒë·ªçc ƒë∆∞·ª£c link n√†y, m·∫π th·ª≠ l·∫°i nh√©.';
                        break;
                }
            } catch (jsonError) {
                statusElement.textContent = `Bot ƒëang g·∫∑p ch√∫t tr·ª•c tr·∫∑c ·ªü m√°y ch·ªß (m√£ ${error.response.status}). Con ƒë√£ bi·∫øt l·ªói n√†y r·ªìi, m·∫π th·ª≠ l·∫°i sau nh√©.`;
            }
            return;
        }

        let genericMessage = 'C√≥ l·ªói x·∫£y ra, m·∫π th·ª≠ l·∫°i ho·∫∑c d√πng link kh√°c nh√©.';
        if (isRestoring) {
            genericMessage = "Kh√¥ng th·ªÉ nghe ti·∫øp. C√≥ l·∫Ω ch∆∞∆°ng truy·ªán c≈© n√†y ƒë√£ b·ªã thay ƒë·ªïi ho·∫∑c x√≥a m·∫π ·∫°.";
        } else if (error.message && error.message.includes('D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c')) {
            // Specific message for invalid data from server
            genericMessage = "Bot kh√¥ng t√¨m th·∫•y n·ªôi dung truy·ªán t·ª´ link n√†y.";
        } else if (error.message) {
            genericMessage = error.message;
        }
        statusElement.textContent = genericMessage;
    }

    // =================================================================
    // 5. Core Logic
    // =================================================================

    async function fetchMetadata(url, signal) {
        if (metadataCache.has(url)) {
            return metadataCache.get(url);
        }

        const response = await fetch(`/api/metadata?url=${encodeURIComponent(url)}`, { signal });

        if (!response.ok) {
            const error = new Error('API request for metadata failed with status ' + response.status);
            error.response = response;
            throw error;
        }

        const data = await response.json();
        if (!data || !data.title) {
            throw new Error("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ m√°y ch·ªß kh√¥ng h·ª£p l·ªá.");
        }

        metadataCache.set(url, data);
        return data;
    }

    async function startPlayback(url, startTime = 0, isRestoring = false) {
        if (currentPlaybackController) {
            currentPlaybackController.abort('user_action');
        }
        currentPlaybackController = new AbortController();
        const { signal } = currentPlaybackController;

        const timeoutId = setTimeout(() => {
            currentPlaybackController.abort('timeout');
        }, REQUEST_TIMEOUT);

        setUiLoadingState(true);
        statusDisplay.textContent = 'ƒêang t√¨m th√¥ng tin ch∆∞∆°ng...';

        try {
            const metadata = await fetchMetadata(url, signal);

            localStorage.removeItem('radioTruyenSession');
            playerState = {
                currentUrl: url,
                currentTitle: metadata.title,
                nextUrl: metadata.next_url,
                prevUrl: metadata.prev_url
            };
            statusDisplay.textContent = 'ƒêang chu·∫©n b·ªã gi·ªçng ƒë·ªçc...';
            navControls.classList.remove('hidden');
            const audioStreamUrl = `/api/read?url=${encodeURIComponent(url)}`;
            pendingStartTime = startTime;
            audioPlayer.src = audioStreamUrl;
            await audioPlayer.play();
            storyUrlInput.value = url;

        } catch (error) {
            await handlePlaybackError(error, statusDisplay, isRestoring);
            setUiLoadingState(false, false);
            navControls.classList.add('hidden');

        } finally {
            clearTimeout(timeoutId);
        }
    }

    // =================================================================
    // 6. Session Management
    // =================================================================

    function saveSession() {
        if (playerState.currentUrl && audioPlayer.currentTime > 0 && !audioPlayer.ended && !isNaN(audioPlayer.duration)) {
            const remainingTime = audioPlayer.duration - audioPlayer.currentTime;
            if (remainingTime > 5) {
                const sessionData = { state: playerState, time: audioPlayer.currentTime };
                localStorage.setItem('radioTruyenSession', JSON.stringify(sessionData));
            }
        }
    }

    function restoreSession() {
        const savedSession = localStorage.getItem('radioTruyenSession');
        if (!savedSession) return;
        try {
            const { state, time } = JSON.parse(savedSession);
            if (state && typeof state.currentUrl === 'string' && state.currentUrl && typeof time === 'number' && time > 0) {
                createRestorePrompt(state, time);
            } else {
                localStorage.removeItem('radioTruyenSession');
            }
        } catch (e) {
            console.error("L·ªói khi kh√¥i ph·ª•c phi√™n:", e);
            localStorage.removeItem('radioTruyenSession');
        }
    }

    // =================================================================
    // 7. Global Event Listeners
    // =================================================================

    playButton.addEventListener('click', () => {
        dismissRestorePrompt();
        const urlString = storyUrlInput.value.trim();

        if (urlString === playerState.currentUrl && audioPlayer.duration > 0 && !audioPlayer.seeking) {
            if (audioPlayer.paused) {
                audioPlayer.play();
            } else {
                audioPlayer.pause();
            }
            return;
        }

        if (!urlString) {
            statusDisplay.textContent = 'M·∫π c·∫ßn d√°n link truy·ªán v√†o √¥ nh√©.';
            return;
        }

        try {
            const url = new URL(urlString);
            const isSupported = SUPPORTED_DOMAINS.some(domain => url.hostname === domain || url.hostname.endsWith('.' + domain));
            if (!isSupported) {
                statusDisplay.textContent = 'Bot ch∆∞a ƒë·ªçc ƒë∆∞·ª£c truy·ªán t·ª´ trang n√†y m·∫π ·∫°.';
                return;
            }
            startPlayback(urlString);
        } catch (e) {
            statusDisplay.textContent = 'Link m·∫π d√°n v√†o kh√¥ng h·ª£p l·ªá.';
        }
    });

    nextChapterButton.addEventListener('click', () => {
        if (!nextChapterButton.disabled && playerState.nextUrl) startPlayback(playerState.nextUrl);
    });

    prevChapterButton.addEventListener('click', () => {
        if (!prevChapterButton.disabled && playerState.prevUrl) startPlayback(playerState.prevUrl);
    });

    audioPlayer.addEventListener('loadedmetadata', () => {
        if (pendingStartTime > 0) {
            audioPlayer.currentTime = pendingStartTime;
            pendingStartTime = 0;
        }
    });

    audioPlayer.addEventListener('playing', () => {
        statusDisplay.innerHTML = 'üéß ƒêang ƒë·ªçc: ';
        const titleSpan = document.createElement('span');
        titleSpan.textContent = playerState.currentTitle;
        statusDisplay.appendChild(titleSpan);
        setUiLoadingState(false, true);
    });

    audioPlayer.addEventListener('pause', () => {
        setUiLoadingState(false, false);
    });

    audioPlayer.addEventListener('ended', () => {
        if (playerState.nextUrl) {
            statusDisplay.textContent = "H·∫øt ch∆∞∆°ng, ƒëang t·ª± ƒë·ªông chuy·ªÉn ch∆∞∆°ng sau...";
            startPlayback(playerState.nextUrl);
        } else {
            statusDisplay.textContent = "ƒê√£ h·∫øt truy·ªán. C·∫£m ∆°n m·∫π ƒë√£ l·∫Øng nghe!";
            navControls.classList.add('hidden');
            setUiLoadingState(false, false);
        }
    });

    audioPlayer.addEventListener('error', (e) => {
        let message = 'C√≥ l·ªói khi ph√°t √¢m thanh, m·∫π th·ª≠ l·∫°i nh√©.';
        if (e.target.error) {
            switch (e.target.error.code) {
                case e.target.error.MEDIA_ERR_NETWORK:
                    message = 'L·ªói m·∫°ng, m·∫π ki·ªÉm tra l·∫°i k·∫øt n·ªëi nh√©.';
                    break;
                case e.target.error.MEDIA_ERR_SRC_NOT_SUPPORTED:
                case e.target.error.MEDIA_ERR_DECODE:
                    message = 'Bot kh√¥ng ƒë·ªçc ƒë∆∞·ª£c link n√†y, m·∫π th·ª≠ link kh√°c nh√©.';
                    break;
            }
        }
        statusDisplay.textContent = message;
        setUiLoadingState(false, false);
        playButton.textContent = 'Th·ª≠ l·∫°i';
    });

    audioPlayer.addEventListener('timeupdate', () => {
        const now = Date.now();
        if (now - lastSaveTime > 5000) {
            saveSession();
            lastSaveTime = now;
        }
    });

    window.addEventListener('beforeunload', saveSession);

    // =================================================================
    // 8. Initialization
    // =================================================================

    setupAccessibility();
    restoreSession();
});